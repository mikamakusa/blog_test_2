apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-ads-blog-test
  namespace: blog-test
spec:
  selector:
    matchLabels:
      app: microservice-ads-blog-test
  template:
    metadata:
      labels:
        app: microservice-ads-blog-test
        role: ads
    spec:
      containers:
        - name: microservice-ads-blog-test
          image: docker.io/mikamakusa/blog-test-ads-service:latest
          imagePullPolicy: Always
          env:
            - name: PORT
              value: "5003"
            - name: MONGODB_HOST
              value: "10.107.211.34:27017"
            - name: MONGODB_DATABASE
              value: "blog-engine"
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: mongodb-user
                  name: mongodb-credentials
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-password
                  name: mongodb-credentials
            - name: JWT_SECRET
              value: "your-super-secret-jwt-key"
            - name: SESSION_SECRET
              value: "your-super-secret-session-key"
            - name: FRONTEND_URL
              value: "192.168.49.2:32312"
            - name: GOOGLE_CLIENT_ID
              value: "your-google-client-id"
            - name: GOOGLE_CLIENT_SECRET
              value: "your-google-client-secret"
            - name: STRAPI_URL
              value: "http://localhost:1337"
          ports:
            - containerPort: 5003
              name: http
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-auth-blog-test
  namespace: blog-test
spec:
  selector:
    matchLabels:
      app: microservice-auth-blog-test
  template:
    metadata:
      labels:
        app: microservice-auth-blog-test
        role: auth
    spec:
      containers:
        - name: microservice-auth-blog-test
          image: docker.io/mikamakusa/blog-test-auth-service
          imagePullPolicy: Always
          env:
            - name: PORT
              value: "5000"
            - name: MONGODB_HOST
              value: "10.107.211.34:27017"
            - name: MONGODB_DATABASE
              value: "blog-engine"
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: mongodb-user
                  name: mongodb-credentials
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-password
                  name: mongodb-credentials
            - name: JWT_SECRET
              value: "your-super-secret-jwt-key"
            - name: SESSION_SECRET
              value: "your-super-secret-session-key"
            - name: FRONTEND_URL
              value: "http://192.168.49.2:32312"
            - name: GOOGLE_CLIENT_ID
              value: "your-google-client-id"
            - name: GOOGLE_CLIENT_SECRET
              value: "your-google-client-secret"
            - name: STRAPI_URL
              value: "http://localhost:1337"
          ports:
            - containerPort: 5000
              name: http
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-events-blog-test
  namespace: blog-test
spec:
  selector:
    matchLabels:
      app: microservice-events-blog-test
  template:
    metadata:
      labels:
        app: microservice-events-blog-test
        role: events
    spec:
      containers:
        - name: microservice-events-blog-test
          image: docker.io/mikamakusa/blog-test-events-service
          imagePullPolicy: Always
          env:
            - name: FRONTEND_URI
              value: "192.168.49.2:32312"
            - name: PORT
              value: "3001"
            - name: MONGODB_HOST
              value: "10.107.211.34:27017"
            - name: MONGODB_DATABASE
              value: "blog-engine"
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: mongodb-user
                  name: mongodb-credentials
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-password
                  name: mongodb-credentials
          ports:
            - containerPort: 5000
              name: http
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-medias-blog-test
  namespace: blog-test
spec:
  selector:
    matchLabels:
      app: microservice-medias-blog-test
  template:
    metadata:
      labels:
        app: microservice-medias-blog-test
        role: medias
    spec:
      containers:
        - name: microservice-medias-blog-test
          image: docker.io/mikamakusa/blog-test-medias-service
          imagePullPolicy: Always
          env:
            - name: PORT
              value: "5004"
            - name: MONGODB_HOST
              value: "10.107.211.34:27017"
            - name: MONGODB_DATABASE
              value: "blog-engine"
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: mongodb-user
                  name: mongodb-credentials
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-password
                  name: mongodb-credentials
            - name: MINIO_ENDPOINT
              value: "10.105.198.235"
            - name: MINIO_PORT
              value: "9000"
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: minio-access-key
                  name: minio-credentials-2
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: minio-secret-key
                  name: minio-credentials-2
          ports:
            - containerPort: 5004
              name: http
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-metrics-blog-test
  namespace: blog-test
spec:
  selector:
    matchLabels:
      app: microservice-metrics-blog-test
  template:
    metadata:
      labels:
        app: microservice-metrics-blog-test
        role: metrics
    spec:
      containers:
        - name: microservice-metrics-blog-test
          image: docker.io/mikamakusa/blog-test-metrics-service
          imagePullPolicy: Always
          env:
            - name: PORT
              value: "5005"
            - name: MONGODB_HOST
              value: "10.107.211.34:27017"
            - name: MONGODB_DATABASE
              value: "blog-engine"
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: mongodb-user
                  name: mongodb-credentials
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-password
                  name: mongodb-credentials
            - name: JWT_SECRET
              value: "your-super-secret-jwt-key"
            - name: SESSION_SECRET
              value: "your-super-secret-session-key"
            - name: FRONTEND_URL
              value: "192.168.49.2:32312"
            - name: GOOGLE_CLIENT_ID
              value: "your-google-client-id"
            - name: GOOGLE_CLIENT_SECRET
              value: "your-google-client-secret"
            - name: STRAPI_URL
              value: "http://localhost:1337"
          ports:
            - containerPort: 5005
              name: http
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-polls-blog-test
  namespace: blog-test
spec:
  selector:
    matchLabels:
      app: microservice-polls-blog-test
  template:
    metadata:
      labels:
        app: microservice-polls-blog-test
        role: polls
    spec:
      containers:
        - name: microservice-polls-blog-test
          image: docker.io/mikamakusa/blog-test-polls-service
          imagePullPolicy: Always
          env:
            - name: PORT
              value: "5006"
            - name: MONGODB_HOST
              value: "10.107.211.34:27017"
            - name: MONGODB_DATABASE
              value: "blog-engine"
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: mongodb-user
                  name: mongodb-credentials
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-password
                  name: mongodb-credentials
            - name: JWT_SECRET
              value: "your-super-secret-jwt-key"
          ports:
            - containerPort: 5006
              name: http
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-users-blog-test
  namespace: blog-test
spec:
  selector:
    matchLabels:
      app: microservice-users-blog-test
  template:
    metadata:
      labels:
        app: microservice-users-blog-test
        role: users
    spec:
      containers:
        - name: microservice-users-blog-test
          image: docker.io/mikamakusa/blog-test-users-service
          imagePullPolicy: Always
          env:
            - name: PORT
              value: "5001"
            - name: MONGODB_HOST
              value: "10.107.211.34:27017"
            - name: MONGODB_DATABASE
              value: "blog-engine"
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: mongodb-user
                  name: mongodb-credentials
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-password
                  name: mongodb-credentials
            - name: JWT_SECRET
              value: "your-super-secret-jwt-key"
            - name: SESSION_SECRET
              value: "your-super-secret-session-key"
            - name: FRONTEND_URL
              value: "192.168.49.2:32312"
            - name: GOOGLE_CLIENT_ID
              value: "your-google-client-id"
            - name: GOOGLE_CLIENT_SECRET
              value: "your-google-client-secret"
            - name: STRAPI_URL
              value: "http://localhost:1337"
          ports:
            - containerPort: 5001
              name: http
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-write-blog-test
  namespace: blog-test
spec:
  selector:
    matchLabels:
      app: microservice-write-blog-test
  template:
    metadata:
      labels:
        app: microservice-write-blog-test
        role: write
    spec:
      containers:
        - name: microservice-write-blog-test
          image: docker.io/mikamakusa/blog-test-write-service
          imagePullPolicy: Always
          env:
            - name: PORT
              value: "5002"
            - name: MONGODB_HOST
              value: "10.107.211.34:27017"
            - name: MONGODB_DATABASE
              value: "blog-engine"
            - name: MONGODB_USER
              valueFrom:
                secretKeyRef:
                  key: mongodb-user
                  name: mongodb-credentials
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: mongodb-password
                  name: mongodb-credentials
            - name: JWT_SECRET
              value: "your-super-secret-jwt-key"
            - name: SESSION_SECRET
              value: "your-super-secret-session-key"
            - name: FRONTEND_URL
              value: "192.168.49.2:32312"
            - name: GOOGLE_CLIENT_ID
              value: "your-google-client-id"
            - name: GOOGLE_CLIENT_SECRET
              value: "your-google-client-secret"
            - name: STRAPI_URL
              value: "http://localhost:1337"
          ports:
            - containerPort: 5002
              name: http
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-frontend-blog-test
  namespace: blog-test
spec:
  selector:
    matchLabels:
      app: microservice-frontend-blog-test
  template:
    metadata:
      labels:
        app: microservice-frontend-blog-test
        role: frontend
    spec:
      containers:
        - name: microservice-frontend-blog-test
          image: docker.io/mikamakusa/blog-test-frontend
          imagePullPolicy: Always
          env:
            - name: REACT_APP_AUTH_URI
              value: "192.168.49.2:32467/auth"
            - name: REACT_APP_ADS_URI
              value: "192.168.49.2:32091/ads"
            - name: REACT_APP_POSTS_URI
              value: "192.168.49.2:30563/write"
            - name: REACT_APP_EVENTS_URI
              value: "192.168.49.2:31072/events"
            - name: REACT_APP_MEDIAS_URI
              value: "192.168.49.2:32059/medias"
            - name: REACT_APP_METRICS_URI
              value: "192.168.49.2:31841/metrics"
            - name: REACT_APP_POLLS_URI
              value: "192.168.49.2:30252/polls"
            - name: REACT_APP_USERS_URI
              value: "192.168.49.2:31463/users"
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
      volumes:
        - name: microservice-frontend-blog-test-config-map
          configMap:
            name: microservice-frontend-blog-test-config-map
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: microservice-ads-blog-test
  name: microservice-ads-blog-test
  namespace: blog-test
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 10.111.25.215
  clusterIPs:
    - 10.111.25.215
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 5003
      nodePort: 31011
      protocol: TCP
      targetPort: 5003
  selector:
    app: microservice-ads-blog-test
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: microservice-auth-blog-test
  name: microservice-auth-blog-test
  namespace: blog-test
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 10.104.248.86
  clusterIPs:
    - 10.104.248.86
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 5000
      nodePort: 32467
      protocol: TCP
      targetPort: 5000
  selector:
    app: microservice-auth-blog-test
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: microservice-events-blog-test
  name: microservice-events-blog-test
  namespace: blog-test
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 10.99.138.222
  clusterIPs:
    - 10.99.138.222
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 3001
      nodePort: 31072
      protocol: TCP
      targetPort: 3001
  selector:
    app: microservice-events-blog-test
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: microservice-frontend-blog-test
  name: microservice-frontend-blog-test
  namespace: blog-test
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 10.104.128.34
  clusterIPs:
    - 10.104.128.34
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 3000
      nodePort: 32312
      protocol: TCP
      targetPort: 3000
  selector:
    app: microservice-frontend-blog-test
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: microservice-medias-blog-test
  name: microservice-medias-blog-test
  namespace: blog-test
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 10.109.230.241
  clusterIPs:
    - 10.109.230.241
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 5004
      nodePort: 32059
      protocol: TCP
      targetPort: 5004
  selector:
    app: microservice-medias-blog-test
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: microservice-metrics-blog-test
  name: microservice-metrics-blog-test
  namespace: blog-test
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 10.101.92.74
  clusterIPs:
    - 10.101.92.74
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 5005
      nodePort: 31841
      protocol: TCP
      targetPort: 5005
  selector:
    app: microservice-metrics-blog-test
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: microservice-polls-blog-test
  name: microservice-polls-blog-test
  namespace: blog-test
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 10.98.238.144
  clusterIPs:
    - 10.98.238.144
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 5006
      nodePort: 30252
      protocol: TCP
      targetPort: 5006
  selector:
    app: microservice-polls-blog-test
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: microservice-users-blog-test
  name: microservice-users-blog-test
  namespace: blog-test
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 10.107.219.213
  clusterIPs:
    - 10.107.219.213
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 5001
      nodePort: 31463
      protocol: TCP
      targetPort: 5001
  selector:
    app: microservice-users-blog-test
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: microservice-write-blog-test
  name: microservice-write-blog-test
  namespace: blog-test
spec:
  allocateLoadBalancerNodePorts: true
  clusterIP: 10.109.159.9
  clusterIPs:
    - 10.109.159.9
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - port: 5002
      nodePort: 30563
      protocol: TCP
      targetPort: 5002
  selector:
    app: microservice-write-blog-test
  type: LoadBalancer